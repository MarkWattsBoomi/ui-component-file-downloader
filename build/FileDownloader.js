!function(){var e={95:function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}},s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var l=s(n(804));n(186);var c=n(589),u=function(e){function t(t){var n=e.call(this,t)||this;return n.lastContent=l.createElement("div",null),n.downloadFile=n.downloadFile.bind(n),n}return i(t,e),t.prototype.componentDidMount=function(){return r(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),this.forceUpdate(),[2]}}))}))},t.prototype.downloadFile=function(e){return r(this,void 0,void 0,(function(){var e,t,n,o,i,r,s,l,c,u,d,p,h;return a(this,(function(a){switch(a.label){case 0:for((e=this.getStateValue())&&(t=e.properties.FileName.value,n=e.properties.Extension.value,e.properties.Size.value,o=e.properties.MimeType.value,(i=e.properties.Content.value).indexOf(",")>=0&&(i=i.split(",")[1])),r=Buffer.from(i,"base64").toString("binary"),s=new ArrayBuffer(r.length),l=new Uint8Array(s),c=0;c<r.length;c++)l[c]=r.charCodeAt(c);return u=new Blob([s],{type:o}),d=t+(n.length>0?"."+n:""),window.navigator.msSaveOrOpenBlob?window.navigator.msSaveOrOpenBlob(u,d):(p=URL.createObjectURL(u),this.anchor.download=d,this.anchor.href=p),(h=this.getAttribute("onClickOutcome","")).length>0?[4,this.triggerOutcome(h)]:[3,2];case 1:a.sent(),a.label=2;case 2:return[2]}}))}))},t.prototype.render=function(){var e=this;if(this.loadingState!==c.eLoadingState.ready)return this.lastContent;var t="file-box "+this.getAttribute("classes",""),n={width:"-webkit-fill-available",height:"-webkit-fill-available"};!1===this.model.visible&&(n.display="none"),this.model.width&&(n.width=this.model.width+"px"),this.model.height&&(n.height=this.model.height+"px"),this.getStateValue();var o=this.getAttribute("title","File Downloader"),i="glyphicon glyphicon-"+this.getAttribute("icon","envelope")+" icon-button",r=parseInt(this.getAttribute("pointSize","24")),a=(this.getAttribute("onClickOutcome",""),{fontSize:r+"pt"});return l.createElement("div",{className:t},l.createElement("div",{className:"file-box-body"},l.createElement("a",{href:"#",ref:function(t){e.anchor=t},onClick:this.downloadFile},l.createElement("span",{className:i,style:a,title:o}))))},t}(c.FlowComponent);t.default=u,manywho.component.register("FileDownloader",u)},806:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(95))},265:function(){},379:function(){},702:function(){},310:function(){},186:function(){},198:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DragEvent=t.eDragEventType=t.modalDialogButton=void 0;var n;t.modalDialogButton=function(e,t){this.label=e,this.handler=t},function(e){e[e.unknown=0]="unknown",e[e.canvas=1]="canvas",e[e.table=2]="table",e[e.link=3]="link",e[e.dialog=4]="dialog"}(n=t.eDragEventType||(t.eDragEventType={}));var o=function(){function e(){this.type=n.unknown,this.sourceElement=null,this.targetElement=null,this.mouseX=0,this.mouseY=0,this.mouseOffsetX=0,this.mouseOffsetY=0}return e.start=function(t,n,o,i){var r=new e;return r.type=t,r.sourceElement=n,r.targetElement=null,r.mouseX=o,r.mouseY=i,r.mouseOffsetX=o,r.mouseOffsetY=i,r},e.prototype.drag=function(e,t){this.mouseX=e,this.mouseY=t},e.prototype.end=function(e,t,o){this.targetElement=e,this.mouseX=t,this.mouseY=o,this.type=n.unknown},e}();t.DragEvent=o},335:function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var r=n(804);n(265);var a=function(e){function t(t){var n=e.call(this,t)||this;return n.displayStyle={},n.menuItems=[],n.showContextMenu=n.showContextMenu.bind(n),n.hideContextMenu=n.hideContextMenu.bind(n),n.positionContextMenu=n.positionContextMenu.bind(n),n}return i(t,e),t.prototype.setMenu=function(e){this.menu=e},t.prototype.positionContextMenu=function(e,t){e<window.innerWidth/2?(this.displayStyle.left=e-10,this.displayStyle.right=void 0):(this.displayStyle.left=void 0,this.displayStyle.right=window.innerWidth-(e+10)),t<window.innerHeight/2?(this.displayStyle.top=t-10,this.displayStyle.bottom=void 0):(this.displayStyle.top=void 0,this.displayStyle.bottom=window.innerHeight-(t+10)+"px"),this.displayStyle.display="block"},t.prototype.showContextMenu=function(e,t,n){if(n.size>0){var o=[];n.forEach((function(e){o.push(e)})),this.menuItems=o,this.positionContextMenu(e,t),this.forceUpdate()}},t.prototype.hideContextMenu=function(){this.displayStyle.display="none",this.menuItems=[],this.forceUpdate()},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"cm",onMouseLeave:this.hideContextMenu,style:{left:this.displayStyle.left,right:this.displayStyle.right,top:this.displayStyle.top,bottom:this.displayStyle.bottom,display:this.displayStyle.display},ref:function(t){return e.setMenu(t)}},r.createElement("ul",{className:"cm-list"},this.menuItems))},t}(r.Component);t.default=a},789:function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowDialogBox=void 0;var s=n(804),l=n(198);n(379);var c=function(e){function t(t){var n=e.call(this,t)||this;return n.dragEvent=new l.DragEvent,n.dialogVisible=!1,n.dialogTitle="",n.dialogButtons=[],n.dialogOnClose=n.hideDialog,n.top=0,n.left=0,n.handleKeyUp=n.handleKeyUp.bind(n),n.handleOutsideClick=n.handleOutsideClick.bind(n),n.showDialog=n.showDialog.bind(n),n.hideDialog=n.hideDialog.bind(n),n}return i(t,e),t.prototype.setDialog=function(e){if(this.dialog=e,this.dialog){var t=this.dialog.offsetParent.clientWidth/2,n=this.dialog.offsetParent.clientHeight/2,o=this.dialog.clientWidth/2,i=this.dialog.clientHeight/2;this.left=t-o,this.top=n-i,this.dialog.classList.add("shown"),this.positionDialog()}},t.prototype.positionDialog=function(){this.dialog&&(this.dialog.style.left=this.left+"px",this.dialog.style.top=this.top+"px")},t.prototype.stopEventBubble=function(e){return e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.cancelBubble=!0,e.returnValue=!1,!1},t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.showDialog=function(e,t,n,o){return r(this,void 0,void 0,(function(){return a(this,(function(i){return this.dialogVisible=!0,this.dialogTitle=e,this.dialogContent=t,this.dialogOnClose=o||this.hideDialog,this.dialogButtons=n,this.forceUpdate(),[2]}))}))},t.prototype.hideDialog=function(e){return r(this,void 0,void 0,(function(){return a(this,(function(e){return this.dialogVisible=!1,this.dialogTitle="",this.dialogContent=void 0,this.dialogOnClose=void 0,this.dialogButtons=[],this.forceUpdate(),[2]}))}))},t.prototype.handleKeyUp=function(e){var t=this,n={27:function(){e.preventDefault(),t.hideDialog()}};n[e.keyCode]&&n[e.keyCode]()},t.prototype.handleOutsideClick=function(e){this.dialog||this.dialog.contains(e.target)||this.hideDialog()},t.prototype.render=function(){var e,t=this;if(!1===this.dialogVisible)e=s.createElement("div",null);else{for(var n=[],o=function(e){n.push(s.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onMouseDown:function(t){t.stopPropagation(),e.handler()}},e.label))},i=0,r=this.dialogButtons;i<r.length;i++)o(r[i]);e=s.createElement("div",{className:"modal-redaction",onMouseMove:function(e){t.onMouseMove(e)},onMouseUp:function(e){t.onMouseUp(e)},onMouseDown:function(e){t.handleOutsideClick(e)},onContextMenu:function(e){e.preventDefault(),e.stopPropagation(),t.props.onContextMenu&&t.props.onContextMenu()}},s.createElement("div",{className:"modal-content",ref:function(e){return t.dialog=e}},s.createElement("div",{className:"modal-dialog"},s.createElement("div",{className:"modal-dialog-header",onMouseDown:function(e){t.onMouseDown(e)}},s.createElement("div",{style:{display:"flex",flexDirection:"row",flexGrow:1}},s.createElement("span",{className:"modal-dialog-header-title"},this.props.title)),s.createElement("div",{style:{display:"flex",flexDirection:"row",marginLeft:"auto",flexGrow:0}},s.createElement("span",{className:"glyphicon glyphicon-remove modal-dialog-header-button",style:{cursor:"pointer",color:"#fefefe",marginRight:"5px",fontSize:"14pt"},title:"Close",onMouseDown:function(e){e.stopPropagation(),t.props.onClose("cancel")}}))),s.createElement("div",{className:"modal-dialog-body"},s.createElement("div",{className:"modal-dialog-body-client"},this.props.children)),s.createElement("div",{className:"modal-dialog-button-bar"},n))))}return e},t.prototype.moveMe=function(e,t){this.left=e,this.top=t,this.positionDialog()},t.prototype.onMouseDown=function(e){var t=e.target.getBoundingClientRect(),n=e.clientY-t.top;this.dragEvent=l.DragEvent.start(l.eDragEventType.dialog,this,e.clientX-t.left,n)},t.prototype.onMouseMove=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.moveMe(e.clientX-this.dragEvent.mouseOffsetX,e.clientY-this.dragEvent.mouseOffsetY)},t.prototype.onMouseUp=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.dragEvent.end(null,e.clientX,e.clientY)},t}(s.Component);t.FlowDialogBox=c},480:function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowMessageBox=void 0;var s=n(804),l=n(198);n(702);var c=function(e){function t(t){var n=e.call(this,t)||this;return n.dragEvent=new l.DragEvent,n.top=0,n.left=0,n.msgboxVisible=!1,n.msgboxTitle="",n.msgboxButtons=[],n.msgboxOnClose=n.hideMessageBox,n.handleKeyUp=n.handleKeyUp.bind(n),n.setDialog=n.setDialog.bind(n),n.showMessageBox=n.showMessageBox.bind(n),n.hideMessageBox=n.hideMessageBox.bind(n),n.positionDialog=n.positionDialog.bind(n),n}return i(t,e),t.prototype.setDialog=function(e){if(this.dialog=e,this.dialog){var t=this.dialog.offsetParent.clientWidth/2,n=this.dialog.offsetParent.clientHeight/2,o=this.dialog.clientWidth/2,i=this.dialog.clientHeight/2;this.left=t-o,this.top=n-i,this.dialog.classList.add("shown"),this.positionDialog()}},t.prototype.positionDialog=function(){this.dialog&&(this.dialog.style.left=this.left+"px",this.dialog.style.top=this.top+"px")},t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.showMessageBox=function(e,t,n,o){return r(this,void 0,void 0,(function(){return a(this,(function(i){return this.msgboxVisible=!0,this.msgboxTitle=e,this.msgboxContent=t,this.msgboxOnClose=o||this.hideMessageBox,this.msgboxButtons=n,this.forceUpdate(),[2]}))}))},t.prototype.hideMessageBox=function(e){return r(this,void 0,void 0,(function(){return a(this,(function(e){return this.msgboxVisible=!1,this.msgboxTitle="",this.msgboxContent=void 0,this.msgboxOnClose=void 0,this.msgboxButtons=[],this.forceUpdate(),[2]}))}))},t.prototype.stopEventBubble=function(e){return e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.cancelBubble=!0,e.returnValue=!1,!1},t.prototype.handleKeyUp=function(e){var t=this,n={27:function(){e.preventDefault(),t.hideMessageBox()}};n[e.keyCode]&&n[e.keyCode]()},t.prototype.render=function(){var e,t=this;if(!1===this.msgboxVisible)e=s.createElement("div",null);else{for(var n=[],o=function(e){n.push(s.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onMouseDown:function(t){t.stopPropagation(),e.handler()}},e.label))},i=0,r=this.msgboxButtons;i<r.length;i++)o(r[i]);e=s.createElement("div",{className:"message-box-redaction",onMouseMove:function(e){t.onMouseMove(e)},onMouseUp:function(e){t.onMouseUp(e)},onContextMenu:function(e){e.preventDefault(),e.stopPropagation(),t.props.onContextMenu&&t.props.onContextMenu()}},s.createElement("div",{className:"message-box-content",ref:function(e){return t.setDialog(e)}},s.createElement("div",{className:"message-box-dialog"},s.createElement("div",{className:"message-box-dialog-header",onMouseDown:function(e){t.onMouseDown(e)}},s.createElement("div",{style:{display:"flex",flexDirection:"row",flexGrow:1}},s.createElement("span",{className:"message-box-dialog-header-title"},this.msgboxTitle)),s.createElement("div",{style:{display:"flex",flexDirection:"row",marginLeft:"auto",flexGrow:0}},s.createElement("span",{className:"glyphicon glyphicon-remove message-box-dialog-header-button",style:{cursor:"pointer",color:"#fefefe",marginRight:"5px",fontSize:"14pt"},title:"Close",onMouseDown:function(e){t.stopEventBubble(e),t.hideMessageBox()}}))),s.createElement("div",{className:"message-box-dialog-body"},this.msgboxContent),s.createElement("div",{className:"modal-dialog-button-bar"},n))))}return e},t.prototype.moveMe=function(e,t){this.left=e,this.top=t,this.positionDialog()},t.prototype.onMouseDown=function(e){var t=e.target.getBoundingClientRect(),n=e.clientY-t.top;this.dragEvent=l.DragEvent.start(l.eDragEventType.dialog,this,e.clientX-t.left,n)},t.prototype.onMouseMove=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.moveMe(e.clientX-this.dragEvent.mouseOffsetX,e.clientY-this.dragEvent.mouseOffsetY)},t.prototype.onMouseUp=function(e){this.dragEvent.type===l.eDragEventType.dialog&&this.dragEvent.end(null,e.clientX,e.clientY)},t}(s.Component);t.FlowMessageBox=c},224:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),manywho.eventManager||(manywho.eventManager={},manywho.eventManager.beforeSendListeners={},manywho.eventManager.doneListeners={},manywho.eventManager.failListeners={},manywho.eventManager.outcomeBeingTriggered,manywho.eventManager.history=[],manywho.eventManager.beforeSend=function(e,t){for(var n in manywho.eventManager.beforeSendListeners)manywho.eventManager.beforeSendListeners[n](e,t)},manywho.eventManager.done=function(e,t){for(var n in manywho.eventManager.doneListeners)manywho.eventManager.doneListeners[n](e,t)},manywho.eventManager.fail=function(e,t){for(var n in manywho.eventManager.failListeners)manywho.eventManager.failListeners[n](e,t)},manywho.eventManager.addBeforeSendListener=function(e,t){manywho.eventManager.beforeSendListeners[t]=e},manywho.eventManager.removeBeforeSendListener=function(e){delete manywho.eventManager.beforeSendListeners[e]},manywho.eventManager.addDoneListener=function(e,t){manywho.eventManager.doneListeners[t]=e},manywho.eventManager.removeDoneListener=function(e){delete manywho.eventManager.doneListeners[e]},manywho.eventManager.addFailListener=function(e,t){manywho.eventManager.failListeners[t]=e},manywho.eventManager.removeFailListener=function(e){delete manywho.eventManager.failListeners[e]},manywho.settings.initialize(null,{invoke:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.done,fail:manywho.eventManager.fail}}))},974:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowAttribute=void 0;var n=function(){function e(e,t){this.Name=e,this.Value=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this.Name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},enumerable:!1,configurable:!0}),e}();t.FlowAttribute=n},923:function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowBaseComponent=t.eLoadingState=void 0;var s=n(804);n(224);var l,c=n(974),u=n(618),d=n(86),p=n(165),h=n(313),f=n(928),y=n(864);!function(e){e[e.ready=0]="ready",e[e.loading=1]="loading",e[e.saving=2]="saving",e[e.moving=3]="moving",e[e.inititializing=4]="inititializing",e[e.inititialized=5]="inititialized",e[e.mounting=6]="mounting",e[e.mounted=7]="mounted"}(l=t.eLoadingState||(t.eLoadingState={}));var m=function(e){function t(t){var n=e.call(this,t)||this;n.Fields={},n.Attributes={},n.Outcomes={},n.sendCollaborationMessage=y(n._sendCollaborationMessage,100,null),n.Fields={},n.LoadingState=l.inititializing,n.loadAllValues=n.loadAllValues.bind(n),n.dontLoadAllValues=n.dontLoadAllValues.bind(n),n.updateValues=n.updateValues.bind(n),n.triggerOutcome=n.triggerOutcome.bind(n),n.ComponentId=n.props.id,n.ParentId=n.props.parentId,n.FlowKey=n.props.flowKey,n.Attributes={},n.loadModel=n.loadModel.bind(n),n.loadAttributes=n.loadAttributes.bind(n),n.loadOutcomes=n.loadOutcomes.bind(n),n.receiveMessage=n.receiveMessage.bind(n),n.getStateValue=n.getStateValue.bind(n),n.setStateValue=n.setStateValue.bind(n),n.getStateValueType=n.getStateValueType.bind(n),n.sendCollaborationMessage=n.sendCollaborationMessage.bind(n),n.onBeforeSend=n.onBeforeSend.bind(n),n.onDone=n.onDone.bind(n),n.calculateValue=n.calculateValue.bind(n),window.addEventListener("message",n.receiveMessage,!1),n.loadModel(),n.loadAttributes(),n.loadOutcomes();var o="";return!manywho.settings.global("platform.uri")&&manywho.settings.global("platform.uri").length<=0&&(o=window.location.origin||"https://flow.manywho.com"),n.StateId=manywho.utils.extractStateId(n.props.flowKey),n.TenantId=manywho.utils.extractTenantId(n.props.flowKey),n.invokeurl=o+"/api/run/1/state/"+n.StateId,n.url=o+"/api/run/1/state/"+n.StateId+"/values",n.userurl=o+"/api/run/1/state/"+n.StateId+"/values/03dc41dd-1c6b-4b33-bf61-cbd1d0778fff",n.valueurl=o+"/api/run/1/state/"+n.StateId+"/values/name",n.LoadingState=l.inititialized,n}return i(t,e),Object.defineProperty(t.prototype,"tenantId",{get:function(){return this.TenantId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"stateId",{get:function(){return this.StateId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"flowKey",{get:function(){return this.FlowKey},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"componentId",{get:function(){return this.ComponentId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"parentId",{get:function(){return this.ParentId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isReady",{get:function(){return this.LoadingState===l.ready},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"loadingState",{get:function(){return this.LoadingState},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"outcomes",{get:function(){return this.Outcomes},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fields",{get:function(){return this.Fields},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"model",{get:function(){return this.Model},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"user",{get:function(){return this.User},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"joinURI",{get:function(){return window.location.href},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isDesignTime",{get:function(){return this.IsDesignTime},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"authenticationToken",{get:function(){return JSON.parse(sessionStorage.flowUser).authenticationToken},enumerable:!1,configurable:!0}),t.prototype.getAttribute=function(e,t){return this.attributes[e]?this.attributes[e].value:t||""},t.prototype.onBeforeSend=function(e,t){if(t){var n=this.getOutcomeById(t.mapElementInvokeRequest.selectedOutcomeId),o=manywho.eventManager.outcomeBeingTriggered;n&&(o&&o.id===n.id||(manywho.eventManager.outcomeBeingTriggered=n))}else manywho.eventManager.outcomeBeingTriggered=void 0},t.prototype.calculateValue=function(e){if(e.startsWith("{{")&&e.endsWith("}}")){for(var t=e.replace("{{",""),n=void 0,o="",i=(t=t.replace("}}","")).split("."),r=0;r<i.length;r++)if(0===r)(n=this.fields[i[r]])?n.ContentType!==d.eContentType.ContentObject&&n.ContentType!==d.eContentType.ContentList&&(o=n.value):(console.log("The Value ["+i[r]+"] was not found, have you included it in your flow"),o=e);else if(n){var a=n.value.properties[i[r]];a?a.contentType===d.eContentType.ContentObject||a.contentType===d.eContentType.ContentList?n=n.value.properties[i[r]].value:o=n.value.properties[i[r]].value:o=e}else o=e;return o}return e},t.prototype.onDone=function(e,t){return r(this,void 0,void 0,(function(){var t,n=this;return a(this,(function(o){switch(o.label){case 0:return"FORWARD"!==e.invokeType?[3,2]:(manywho.model.parseEngineResponse(e,this.flowKey),this.loadModel(),this.loadAttributes(),this.loadOutcomes(),[4,this.preserveState()]);case 1:o.sent(),o.label=2;case 2:return manywho.eventManager.outcomeBeingTriggered&&manywho.eventManager.outcomeBeingTriggered.attributes&&(t=manywho.eventManager.outcomeBeingTriggered,Object.keys(manywho.eventManager.outcomeBeingTriggered.attributes).forEach((function(e){return r(n,void 0,void 0,(function(){var n,o,i;return a(this,(function(r){switch(r.label){case 0:switch((n=manywho.eventManager.outcomeBeingTriggered.attributes[e]).name.toLowerCase()){case"autoclose":return[3,1];case"autoopen":return[3,2];case"autonav":case"automove":return[3,6];case"autoprint":return[3,10]}return[3,11];case 1:return"true"===n.value.toLowerCase()&&window.close(),[3,11];case 2:return(o=t.attributes.AutoOpenUrl||void 0)&&o.value.length>0?[4,this.calculateValue(o.value)]:[3,4];case 3:return i=r.sent(),window.open(i,"_blank"),[3,5];case 4:alert("No 'AutoOpenUrl' specified in the outcome's attributes"),r.label=5;case 5:return[3,11];case 6:return(o=t.attributes.AutoNavUrl||void 0)&&o.value.length>0?[4,this.calculateValue(o.value)]:[3,8];case 7:return i=r.sent(),window.open(i,"_blank"),[3,9];case 8:alert("No 'AutoNavUrl' specified in the outcome's attributes"),r.label=9;case 9:return[3,11];case 10:return window.print(),[3,11];case 11:return[2]}}))}))}))),this.LoadingState=l.ready,manywho.eventManager.outcomeBeingTriggered=void 0,[2]}}))}))},t.prototype.componentDidMount=function(){return r(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return this.LoadingState=l.mounting,manywho.eventManager.addDoneListener(this.onDone,this.componentId+"_core"),manywho.eventManager.addBeforeSendListener(this.onBeforeSend,this.componentId+"_core"),[4,this.preserveState()];case 1:return e.sent(),this.LoadingState=l.mounted,manywho.utils.removeLoadingIndicator("loader"),[2,Promise.resolve()]}}))}))},t.prototype.preserveState=function(){return r(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return this.LoadingState=l.mounting,[4,this.setStateValue(this.getStateValue())];case 1:return e.sent(),this.LoadingState=l.mounted,[2]}}))}))},t.prototype.componentWillUnmount=function(){return r(this,void 0,void 0,(function(){return a(this,(function(e){return manywho.eventManager.removeBeforeSendListener(this.componentId+"_core"),manywho.eventManager.removeDoneListener(this.componentId+"_core"),[2,Promise.resolve()]}))}))},t.prototype.loadOutcome=function(e){if(e){var t=manywho.model.getOutcome(e,this.props.flowKey);if(t)return this.Outcomes[t.developerName]=new f.FlowOutcome(t),this.Outcomes[t.developerName]}},t.prototype.loadOutcomes=function(){this.Outcomes={};for(var e=manywho.model.getOutcomes(this.props.id,this.props.flowKey),t=0,n=e;t<n.length;t++){var o=n[t];this.Outcomes[o.developerName]=new f.FlowOutcome(o)}for(var i=0,r=e=manywho.model.getOutcomes("",this.props.flowKey);i<r.length;i++)o=r[i],this.Outcomes[o.developerName]=new f.FlowOutcome(o)},t.prototype.getOutcomeById=function(e){var t,n=this;return Object.keys(this.outcomes).forEach((function(o){n.outcomes[o].id===e&&(t=n.outcomes[o])})),t||(t=this.loadOutcome(e)),t},t.prototype.loadAttributes=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){var t=e.attributes;if(t)for(var n=0,o=Object.keys(t);n<o.length;n++){var i=o[n];this.Attributes[i]=new c.FlowAttribute(i,t[i])}}},t.prototype.loadModel=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){this.Model={contentType:e.contentType,content:e.content,dataSource:new h.FlowObjectDataArray([]),developerName:e.developerName,displayColumns:[],enabled:e.isEnabled,height:e.height,helpInfo:e.helpInfo,hintInfo:e.hintValue,joinUri:this.joinURI,label:e.label,maxSize:e.maxSize,multiSelect:e.isMultiSelect,readOnly:!e.isEditable,required:e.isRequired,size:e.size,validationMessage:e.validationMessage,visible:e.isVisible,width:e.width};var t=e.objectData;if(t)for(var n=0,o=t;n<o.length;n++){var i=o[n];this.Model.dataSource.addItem(new p.FlowObjectData([i]))}var r=e.columns;if(r)for(var a=0,s=r;a<s.length;a++){var l=s[a];this.Model.displayColumns.push(new u.FlowDisplayColumn(l))}}},t.prototype.loadValue=function(e){return r(this,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:return this.LoadingState=l.loading,[4,this.callRequestOld(this.valueurl+"/"+e,"GET",{})];case 1:return(t=n.sent())&&(this.Fields[t.developerName]=new d.FlowField(t)),this.LoadingState=l.ready,[2,this.Fields[t.developerName]]}}))}))},t.prototype.getResultBodyText=function(e){return r(this,void 0,void 0,(function(){return a(this,(function(t){return[2,e.text().then((function(e){return e.startsWith('"')&&(e=e.substr(1)),e.endsWith('"')&&(e=e.substr(0,e.length-1)),e}))]}))}))},t.prototype.callRequest=function(e,t,n){return r(this,void 0,void 0,(function(){var o,i,s=this;return a(this,(function(l){switch(l.label){case 0:return o=[],(i={}).method=t,i.headers={"Content-Type":"application/json",Authorization:this.authenticationToken,ManyWhoTenant:this.tenantId},i.credentials="same-origin","POST"!==t&&"PUT"!==t||(i.body=n),[4,fetch(e,i).then((function(e){return r(s,void 0,void 0,(function(){var t,n;return a(this,(function(i){switch(i.label){case 0:return 200!==e.status?[3,2]:[4,this.getResultBodyText(e)];case 1:return t=i.sent(),JSON.parse(t).forEach((function(e){o.push(e)})),console.log("Loaded Values"),[2,o];case 2:return[4,this.getResultBodyText(e)];case 3:return n=i.sent(),console.log("Can't load values - "+n),[2,o]}}))}))}))];case 1:return l.sent(),[2]}}))}))},t.prototype.callRequestOld=function(e,t,n){return r(this,void 0,void 0,(function(){return a(this,(function(o){switch(o.label){case 0:return[4,manywho.connection.request(this,null,e,t,this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),n)];case 1:return[2,o.sent()]}}))}))},t.prototype.loadAllValues=function(){return r(this,void 0,void 0,(function(){var e,t,n,o=this;return a(this,(function(i){switch(i.label){case 0:return this.LoadingState=l.loading,this.Fields={},[4,this.callRequestOld(this.url,"GET",{})];case 1:return(i.sent()||[]).map((function(e){e&&(o.Fields[e.developerName]=new d.FlowField(e))})),[4,this.callRequestOld(this.userurl,"GET",{})];case 2:return(e=i.sent())&&(t=new d.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value}),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype.dontLoadAllValues=function(){return r(this,void 0,void 0,(function(){var e,t,n;return a(this,(function(o){switch(o.label){case 0:return this.LoadingState=l.loading,[4,this.callRequestOld(this.userurl,"GET",{})];case 1:return(e=o.sent())&&(t=new d.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value}),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype.getStateValue=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{},t=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(t)switch(t.contentType){case"ContentObject":return e.objectData&&e.objectData[0]&&e.objectData[0].properties.length>0?new p.FlowObjectData([e.objectData[0]]):(n=this.model.dataSource.getSelectedItems()).items.length>0?n.items[0]:void 0;case"ContentList":return e.objectData&&e.objectData.length>0?new h.FlowObjectDataArray(e.objectData):(n=this.model.dataSource.getSelectedItems()).items.length>0?n:void 0;var n;default:return e.contentValue?e.contentValue:""}},t.prototype.getStateValueType=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey).contentType;return d.eContentType[e]},t.prototype.setStateValue=function(e,t){return r(this,void 0,void 0,(function(){var t,n,o,i,r;return a(this,(function(a){if(this.LoadingState===l.mounting||this.LoadingState===l.ready){if(t=this.loadingState,this.LoadingState=l.saving,n=manywho.model.getComponent(this.ComponentId,this.FlowKey),manywho.state.getComponent(this.componentId,this.flowKey),o=void 0,n)switch(n.contentType){case"ContentObject":i=null,e&&(e.isSelected=!0,i=e.iFlowObjectDataArray(),i=JSON.parse(JSON.stringify(i))),o={objectData:i},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentList":r=null,e&&(r=e.iFlowObjectDataArray(),r=JSON.parse(JSON.stringify(r))),o={objectData:r},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentDate":o={contentValue:e.toISOString()},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;default:o={contentValue:e},manywho.state.setComponent(this.componentId,o,this.flowKey,!0)}this.LoadingState=t,manywho.collaboration.isInitialized(this.flowKey)}return[2,Promise.resolve()]}))}))},t.prototype.eventHandled=function(e,t){console.log("ping")},t.prototype.updateValues=function(e){return r(this,void 0,void 0,(function(){var t,n,o,i,r=this;return a(this,(function(a){switch(a.label){case 0:if(this.LoadingState=l.saving,t=[],e.constructor.name===d.FlowField.name)t.push(e.iFlowField());else for(n=0,o=e;n<o.length;n++)i=o[n],t.push(i.iFlowField());return[4,this.callRequestOld(this.url,"POST",t)];case 1:return a.sent(),manywho.collaboration.isInitialized(this.flowKey)&&t.forEach((function(e){manywho.collaboration.push(r.ComponentId,{message:{action:"REFRESH_FIELD",fieldName:e.developerName}},r.flowKey)})),this.LoadingState=l.ready,[2,Promise.resolve()]}}))}))},t.prototype._sendCollaborationMessage=function(e){manywho.collaboration.isInitialized(this.flowKey)&&manywho.collaboration.push(this.ComponentId,{message:e},this.flowKey)},t.prototype.triggerOutcome=function(e,t){return r(this,void 0,void 0,(function(){var n;return a(this,(function(o){switch(o.label){case 0:return this.LoadingState=l.moving,t||(t=[]),this.outcomes[e]&&(n=this.outcomes[e].iFlowOutcome()),n?[4,manywho.component.onOutcome(n,t,this.FlowKey)]:[3,2];case 1:return o.sent(),[3,3];case 2:this.log("Could not find outcome "+e),o.label=3;case 3:return[2,Promise.resolve()]}}))}))},t.prototype.moveTo=function(e,t){return r(this,void 0,void 0,(function(){var t,n,o,i;return a(this,(function(r){switch(r.label){case 0:return this.LoadingState=l.moving,t="/api/run/1/state/"+this.stateId,n=manywho.state.getState(this.flowKey),(o={}).currentMapElementId=n.currentMapElementId,o.invokeType="NAVIGATE",o.mapElementInvokeRequest={},o.mapElementInvokeRequest.selectedOutcomeId=null,o.pageRequest={pageComponentInputResponses:[{pageComponentId:this.componentId,contentValue:null,objectData:null}]},o.selectedMapElementId=e,o.stateId=this.stateId,o.stateToken=n.token,[4,manywho.connection.request(this,null,t,"POST",this.tenantId,this.stateId,manywho.state.getAuthenticationToken(this.flowKey),o)];case 1:return i=r.sent(),manywho.model.parseEngineResponse(i,this.flowKey),[4,manywho.engine.render(this.flowKey)];case 2:return r.sent(),[2,Promise.resolve()]}}))}))},t.prototype.log=function(e){var t=new Date,n="["+[("0"+t.getHours()).slice(-2),("0"+t.getMinutes()).slice(-2),("0"+t.getSeconds()).slice(-2)].join(":")+"] ";console.log(n+e)},t.prototype.launchFlowSilent=function(e,t,n,o){return r(this,void 0,void 0,(function(){var e,n,i;return a(this,(function(r){return e=manywho.settings.global("platform.uri")||"https://flow.manywho.com",n=e+"/api/run/1/state",(i={}).id=t,i.developerName=null,i.inputs=o?o.iFlowObjectDataArray():null,manywho.connection.request(this,"",n,"POST",this.TenantId,"",manywho.state.getAuthenticationToken(this.FlowKey),i),[2,Promise.resolve()]}))}))},t.prototype.launchFlowTab=function(e,t,n,o){return r(this,void 0,void 0,(function(){var o,i;return a(this,(function(r){return o=manywho.settings.global("platform.uri")||"https://flow.boomi.com",i=o+"/"+e+"/play/"+n+"?flow-id="+t,window.open(i,"_new"),[2,Promise.resolve()]}))}))},t.prototype.componentDidUpdate=function(){return r(this,void 0,void 0,(function(){var e,t;return a(this,(function(n){switch(n.label){case 0:if(!(e=manywho.state.getComponent(this.componentId,this.flowKey)))return[3,7];if(t=e.message,this.loadModel(),t&&manywho.state.setComponent(this.componentId,{message:{}},this.flowKey,!1),!t||!t.action)return[3,6];switch(t.action.toUpperCase()){case"REFRESH_FIELDS":return[3,1];case"REFRESH_FIELD":return[3,3]}return[3,5];case 1:return[4,this.loadAllValues()];case 2:return n.sent(),[3,6];case 3:return[4,this.loadValue(t.fieldName)];case 4:return n.sent(),[3,6];case 5:return[3,6];case 6:return[2,t];case 7:return[2]}}))}))},t.prototype.receiveMessage=function(e){return r(this,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:if(!e.data)return[3,9];if(!(t=e.data).action)return[3,9];switch(t.action.toUpperCase()){case"OUTCOME":return[3,1];case"REFRESH_FIELDS":return[3,3];case"REFRESH_FIELD":return[3,5]}return[3,7];case 1:return[4,this.triggerOutcome(t.data)];case 2:return n.sent(),[3,9];case 3:return[4,this.loadAllValues()];case 4:return n.sent(),[3,9];case 5:return[4,this.loadValue(t.fieldName)];case 6:return n.sent(),[3,9];case 7:return[4,this.handleMessage(t)];case 8:return n.sent(),[3,9];case 9:return[2,Promise.resolve()]}}))}))},t.prototype.handleMessage=function(e){return r(this,void 0,void 0,(function(){return a(this,(function(e){return[2,Promise.resolve()]}))}))},t}(s.Component);t.FlowBaseComponent=m},213:function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowChart=t.FlowChartColumnDefinition=t.eFlowChartType=void 0;var s,l=n(804),c=n(923),u=n(86);!function(e){e[e.BarChart=0]="BarChart",e[e.ColumnChart=1]="ColumnChart",e[e.GeoChart=2]="GeoChart",e[e.PieChart=3]="PieChart",e[e.DonutChart=4]="DonutChart"}(s=t.eFlowChartType||(t.eFlowChartType={}));t.FlowChartColumnDefinition=function(e,t){this.developerName=e,this.type=t};var d=function(e){function t(t){var n=e.call(this,t)||this;return n.apiKey="",n.beginChartsApi=n.beginChartsApi.bind(n),n.apiLoaded=n.apiLoaded.bind(n),n.drawChart=n.drawChart.bind(n),n.flowMoved=n.flowMoved.bind(n),n.apiKey=n.getAttribute("APIKey",""),n}return i(t,e),t.prototype.componentDidMount=function(){return r(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.dontLoadAllValues()];case 2:return t.sent(),manywho.eventManager.addDoneListener(this.flowMoved,this.componentId),this.beginChartsApi(),[2]}}))}))},t.prototype.componentWillUnmount=function(){return r(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentWillUnmount.call(this)];case 1:return t.sent(),manywho.eventManager.removeDoneListener(this.componentId),[2]}}))}))},t.prototype.flowMoved=function(e,t){return r(this,void 0,void 0,(function(){var n;return a(this,(function(o){return n=this,"FORWARD"===e.invokeType&&(this.loadingState!==c.eLoadingState.ready?window.setTimeout((function(){n.flowMoved(e,t)}),500):(manywho.model.parseEngineResponse(e,this.props.flowKey),this.beginChartsApi())),[2]}))}))},t.prototype.beginChartsApi=function(){if("undefined"==typeof google||void 0===google.charts)if(void 0===window.G13ChartLoading){var e=document.createElement("script");e.src="https://www.gstatic.com/charts/loader.js",e.addEventListener("load",this.apiLoaded),window.document.body.appendChild(e),window.G13ChartLoading=!0}else window.setTimeout(this.beginChartsApi,300);else this.apiLoaded()},t.prototype.apiLoaded=function(){var e;(null===google||void 0===google?void 0:google.charts)&&(null===(e=null===google||void 0===google?void 0:google.visualization)||void 0===e?void 0:e.GeoChart)?this.drawChart():(google.charts.load("current",{packages:["corechart","geochart"],mapsApiKey:this.apiKey}),google.charts.setOnLoadCallback(this.drawChart))},t.prototype.buildData=function(e){var t=this;this.model.dataSource&&this.model.dataSource.items.forEach((function(n){var o=[];t.propertyNames.forEach((function(e){var t=n.properties[e.developerName];e.type===u.eContentType.ContentNumber?o.push(parseInt(t.value)):o.push(t.value)})),e.push(o)}))},t.prototype.drawChart=function(){var e=[];if(e.push(this.columnNames),this.buildData(e),this.chartData=google.visualization.arrayToDataTable(e),!this.chart)switch(this.chartType){case s.BarChart:this.chart=new google.visualization.BarChart(document.getElementById(this.componentId));break;case s.ColumnChart:this.chart=new google.visualization.ColumnChart(document.getElementById(this.componentId));break;case s.GeoChart:this.chart=new google.visualization.GeoChart(document.getElementById(this.componentId));break;case s.PieChart:case s.DonutChart:this.chart=new google.visualization.PieChart(document.getElementById(this.componentId))}this.chart.draw(this.chartData,this.options)},t.prototype.render=function(){return l.createElement("div",{id:this.componentId})},t}(c.FlowBaseComponent);t.FlowChart=d},495:function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowComponent=void 0;var s=function(e){function t(t){return e.call(this,t)||this}return i(t,e),t.prototype.componentDidMount=function(){return r(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.dontLoadAllValues()];case 2:return t.sent(),[2,Promise.resolve()]}}))}))},t}(n(923).FlowBaseComponent);t.FlowComponent=s},589:function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||o(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(495),t),i(n(180),t),i(n(789),t),i(n(480),t),i(n(335),t),i(n(198),t),i(n(259),t),i(n(923),t),i(n(974),t),i(n(618),t),i(n(86),t),i(n(165),t),i(n(313),t),i(n(482),t),i(n(928),t),i(n(213),t)},618:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowDisplayColumn=void 0;var o=n(86),i=function(){function e(e){this.Column=e,this.ComponentType=e.componentType,this.ContentFormat=e.contentFormat,this.ContentType=o.eContentType[e.contentType],this.DeveloperName=e.developerName,this.DisplayOrder=e.order,this.Label=e.label,this.ReadOnly=!e.isEditable,this.TypeElememtPropertyToDisplayId=e.typeElememtPropertyToDisplayId,this.TypeElementPropertyId=e.typeElementPropertyId,this.Visible=e.isDisplayValue}return Object.defineProperty(e.prototype,"componentType",{get:function(){return this.ComponentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){return this.Visible},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"readOnly",{get:function(){return this.ReadOnly},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"displayOrder",{get:function(){return this.DisplayOrder},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElememtPropertyToDisplayId",{get:function(){return this.TypeElememtPropertyToDisplayId},enumerable:!1,configurable:!0}),e.prototype.iFlowDisplayColumn=function(){return this.Column},e}();t.FlowDisplayColumn=i},86:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowField=t.eContentType=void 0;var o,i=n(165),r=n(313);!function(e){e[e.unknown=0]="unknown",e[e.ContentString=1]="ContentString",e[e.ContentNumber=2]="ContentNumber",e[e.ContentObject=3]="ContentObject",e[e.ContentBoolean=4]="ContentBoolean",e[e.ContentList=5]="ContentList",e[e.ContentPassword=6]="ContentPassword",e[e.ContentContent=7]="ContentContent",e[e.ContentDateTime=8]="ContentDateTime",e[e.ContentEncrypted=9]="ContentEncrypted"}(o=t.eContentType||(t.eContentType={}));var a=function(){function e(e){if(this.ContentType=o.unknown,this.DeveloperName="",this.TypeElementDeveloperName="",this.TypeElementId="",this.TypeElementPropertyDeveloperName="",this.TypeElementPropertyId="",this.ValueElementId="",e)switch(this.ContentType=o[e.contentType],this.DeveloperName=e.developerName,this.TypeElementDeveloperName=e.typeElementDeveloperName,this.TypeElementId=e.typeElementId,this.TypeElementPropertyDeveloperName=e.typeElementPropertyDeveloperName,this.TypeElementPropertyId=e.typeElementPropertyId,this.ValueElementId=e.valueElementId,this.ContentType){case o.ContentObject:this.Value=e.objectData?new i.FlowObjectData(e.objectData):void 0;break;case o.ContentList:this.Value=e.objectData&&e.objectData[0]?new r.FlowObjectDataArray(e.objectData):new r.FlowObjectDataArray([]);break;default:this.Value=e.contentValue}}return Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementDeveloperName",{get:function(){return this.TypeElementDeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyDeveloperName",{get:function(){return this.TypeElementPropertyDeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"valueElementId",{get:function(){return this.ValueElementId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},set:function(e){this.Value=e},enumerable:!1,configurable:!0}),e.prototype.iFlowField=function(){var e="",t=[];switch(this.ContentType){case o.ContentObject:var n=this.Value;t.push(n.iObjectData());break;case o.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value?this.Value:""}return{contentType:o[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementDeveloperName:this.TypeElementDeveloperName,typeElementId:this.TypeElementId,typeElementPropertyDeveloperName:this.TypeElementPropertyDeveloperName,typeElementPropertyId:this.TypeElementPropertyId,valueElementId:this.ValueElementId}},e}();t.FlowField=a},165:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectData=void 0;var o=n(482),i=function(){function e(e){if(this.DeveloperName="",this.ExternalId="",this.InternalId="",this.IsSelected=!1,this.Order=0,this.TypeElementId="",this.Properties={},e&&e[0]){var t=e[0];if(this.DeveloperName=t.developerName,this.InternalId=t.internalId,this.ExternalId=t.externalId,this.Order=t.order,this.IsSelected=t.isSelected,this.TypeElementId=t.typeElementId,t.properties&&t.properties.length>0)for(var n=0,i=t.properties;n<i.length;n++){var r=i[n];this.Properties[r.developerName]=new o.FlowObjectDataProperty(r)}}else console.log("null data")}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"externalId",{get:function(){return this.ExternalId},set:function(e){this.ExternalId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"internalId",{get:function(){return this.InternalId},set:function(e){this.InternalId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isSelected",{get:function(){return this.IsSelected},set:function(e){this.IsSelected=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},set:function(e){this.Order=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"properties",{get:function(){return this.Properties},enumerable:!1,configurable:!0}),e.newInstance=function(e){return new this([{developerName:e,externalId:"",internalId:manywho.utils.guid(),isSelected:!1,order:0,properties:[],typeElementId:""}])},e.prototype.addProperty=function(e){this.Properties[e.developerName]=e},e.prototype.removeProperty=function(e){delete this.Properties[e]},e.prototype.clone=function(t){var n=this,o=e.newInstance(t||this.DeveloperName);return Object.keys(this.properties).forEach((function(e){var t=n.properties[e].clone();o.properties[e]=t})),o},e.prototype.iObjectData=function(e){for(var t=[],n=0,o=Object.keys(this.properties);n<o.length;n++){var i=o[n];t.push(this.properties[i].iFlowObjectDataProperty())}return{developerName:this.developerName,externalId:this.externalId,internalId:this.internalId,isSelected:e||this.isSelected,order:this.order,properties:t,typeElementId:this.TypeElementId}},e.prototype.iFlowObjectDataArray=function(e){var t=[];return t.push(this.iObjectData(e)),t},e}();t.FlowObjectData=i},313:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectDataArray=t.eSortOrder=void 0;var o,i=n(86),r=n(165);!function(e){e[e.ascending=0]="ascending",e[e.descending=1]="descending"}(o=t.eSortOrder||(t.eSortOrder={}));var a=function(){function e(e){this.Items=[];for(var t=0,n=e||[];t<n.length;t++){var o=n[t];this.Items.push(new r.FlowObjectData([o]))}}return Object.defineProperty(e.prototype,"items",{get:function(){return this.Items},enumerable:!1,configurable:!0}),e.prototype.sort=function(e,t){return e===o.ascending?t?this.Items.sort((function(e,n){var o,r;switch(e.properties[t].contentType){case i.eContentType.ContentNumber:o=parseFloat(e.properties[t].value),r=parseFloat(n.properties[t].value);break;case i.eContentType.ContentDateTime:o=new Date(e.properties[t].value),r=new Date(n.properties[t].value);break;default:o=e.properties[t].value,r=n.properties[t].value}switch(!0){case o<r:return-1;case o>r:return 1;default:return 0}})):this.Items.sort((function(e,t){return e.order-t.order})):t?this.Items.sort((function(e,n){if(!(e&&n&&e.properties&&n.properties&&e.properties[t]&&n.properties[t]&&e.properties[t].value&&n.properties[t].value))return 0;if(!e.properties[t])return 0;switch(!0){case e.properties[t].value<n.properties[t].value:return 1;case e.properties[t].value>n.properties[t].value:return-1;default:return 0}})):this.Items.sort((function(e,t){return e.order-t.order}))},e.prototype.addItem=function(e){this.Items.push(e)},e.prototype.clearItems=function(){this.Items=[]},e.prototype.clone=function(){var t=new e;return this.items.forEach((function(e){t.addItem(e.clone())})),t},e.prototype.iFlowObjectDataArray=function(e){for(var t=[],n=0,o=this.Items;n<o.length;n++){var i=o[n];t.push(i.iObjectData(e))}return t},e.prototype.getItemWithPropertyName=function(e,t,n){for(var o=0,r=this.Items;o<r.length;o++){var a=r[o];if(a.properties[e]&&null!=a.properties[e].value){var s=a.properties[e].value,l=t;switch(a.properties[e].contentType){case i.eContentType.ContentString:s=s.toLowerCase(),l=l.toLowerCase();break;case i.eContentType.ContentNumber:s=s,l=parseFloat(l.toLowerCase());break;case i.eContentType.ContentBoolean:s=s,l="true"===new String(l).toLowerCase()}if(s===l)return a.properties[n]}}return null},e.prototype.getSelectedItems=function(){for(var t=new e,n=0,o=this.Items;n<o.length;n++){var i=o[n];!0===i.isSelected&&t.addItem(i)}return t},e.prototype.getItemWithPropertyValue=function(e,t){for(var n=0,o=this.Items;n<o.length;n++){var r=o[n];if(r.properties[e]&&null!=r.properties[e].value){var a=r.properties[e].value,s=t;switch(r.properties[e].contentType){case i.eContentType.ContentString:a=a.toLowerCase(),s=new String(s).toLowerCase();break;case i.eContentType.ContentNumber:a=a,s=parseFloat(new String(s).toLowerCase());break;case i.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}if(a===s)return r}}},e.prototype.getIndexOfItemWithPropertyValue=function(e,t){for(var n=0;n<this.items.length;n++){var o=this.items[n];if(o.properties[e]&&null!=o.properties[e].value){var r=o.properties[e].value,a=t;switch(o.properties[e].contentType){case i.eContentType.ContentString:r=r.toLowerCase(),a=a.toLowerCase();break;case i.eContentType.ContentNumber:r=r,a=parseFloat(new String(a).toLowerCase());break;case i.eContentType.ContentBoolean:r=r,a="true"===new String(a).toLowerCase()}if(r===a)return n}}return-1},e.prototype.removeItemWithPropertyValue=function(e,t){for(var n=0,o=0;o<this.items.length;o++){var r=this.items[o];if(r.properties[e]&&null!=r.properties[e].value){var a=r.properties[e].value,s=t;switch(r.properties[e].contentType){case i.eContentType.ContentString:a=a.toLowerCase(),s=s.toLowerCase();break;case i.eContentType.ContentNumber:a=a,s=parseFloat(new String(s).toLowerCase());break;case i.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}a===s&&(this.items.splice(o,1),n++)}}return n},e.prototype.removeItemAtIndex=function(e){var t=0;return this.items[e]&&(this.items.splice(e,1),t=e),t},e}();t.FlowObjectDataArray=a},482:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowObjectDataProperty=void 0;var o=n(86),i=n(165),r=n(313),a=function(){function e(e){if(this.ContentFormat="",this.ContentType=o.eContentType.unknown,this.DeveloperName="",this.TypeElementId="",this.TypeElementPropertyId="",e)switch(this.DeveloperName=e.developerName,this.ContentType=o.eContentType[e.contentType],this.ContentFormat=e.contentFormat?e.contentFormat:"",this.TypeElementId=e.typeElementId?e.typeElementId:"",this.TypeElementPropertyId=e.typeElementPropertyId,this.ContentType){case o.eContentType.ContentObject:this.Value=e.objectData?new i.FlowObjectData(e.objectData):void 0;break;case o.eContentType.ContentList:this.value=e.objectData?new r.FlowObjectDataArray(e.objectData):new r.FlowObjectDataArray([]);break;default:this.value=e.contentValue?e.contentValue:""}}return e.newInstance=function(e,t,n){var i="",r=[];switch(t){case o.eContentType.ContentObject:var a=n;r.push(a.iObjectData());break;case o.eContentType.ContentList:r=n.iFlowObjectDataArray();break;default:i=n}return new this({contentFormat:"",contentType:o.eContentType[t],contentValue:i,developerName:e,objectData:r,typeElementId:"",typeElementPropertyId:""})},Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},set:function(e){this.contentFormat=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},set:function(e){this.ContentType=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},set:function(e){this.TypeElementPropertyId=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){switch(this.contentType){case o.eContentType.ContentNumber:return parseFloat(this.Value?this.Value:"0");case o.eContentType.ContentBoolean:return"true"===new String(this.Value).toLowerCase();default:return this.Value}},set:function(e){this.Value=e},enumerable:!1,configurable:!0}),e.prototype.clone=function(){var t;switch(this.contentType){case o.eContentType.ContentList:t=new r.FlowObjectDataArray,this.value.items.forEach((function(e){t.addItem(e.clone(e.developerName))}));break;case o.eContentType.ContentObject:t=this.value.clone(this.value.developerName);break;default:t=this.value}return e.newInstance(this.developerName,this.contentType,t)},e.prototype.iFlowObjectDataProperty=function(){var e="",t=[];switch(this.ContentType){case o.eContentType.ContentObject:var n=this.Value;n&&n.developerName&&n.developerName.length>0&&t.push(n.iObjectData());break;case o.eContentType.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value}return{contentFormat:this.ContentFormat,contentType:o.eContentType[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementId:this.TypeElementId,typeElementPropertyId:this.TypeElementPropertyId}},Object.defineProperty(e.prototype,"displayString",{get:function(){var e="";if(this.Value)switch(this.ContentType){case o.eContentType.ContentString:case o.eContentType.ContentNumber:e=this.Value;break;case o.eContentType.ContentBoolean:e=!0===this.Value?"True":"False";break;case o.eContentType.ContentDateTime:var t=Date.parse(this.Value);if(!isNaN(t)){var n=new Date(t);return e.length<=10?n.toLocaleDateString():n.toLocaleString()}break;default:e=o.eContentType[this.ContentType]}else e="Undefined";return e},enumerable:!1,configurable:!0}),e}();t.FlowObjectDataProperty=a},928:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FlowOutcome=t.ePageActionType=t.ePageActionBindingType=void 0;var o,i,r=n(974);(i=t.ePageActionBindingType||(t.ePageActionBindingType={})).Save="SAVE",i.PartialSave="PARTIAL_SAVE",i.NoSave="NO_SAVE",(o=t.ePageActionType||(t.ePageActionType={})).New="NEW",o.Query="QUERY",o.Insert="INSERT",o.Update="UPDATE",o.Upsert="UPSERT",o.Delete="DELETE",o.Remove="REMOVE",o.Add="ADD",o.Edit="EDIT",o.Next="NEXT",o.Back="BACK",o.Done="DONE",o.Save="SAVE",o.Cancel="CANCEL",o.Apply="APPLY",o.Import="IMPORT",o.Close="CLOSE",o.Open="OPEN",o.Submit="SUBMIT",o.Escalate="ESCALATE",o.Reject="REJECT",o.Delegate="DELEGATE";var a=function(){function e(e){if(this.DeveloperName=e.developerName,this.Id=e.id,this.IsBulkAction=e.isBulkAction,this.IsOut=e.isOut,this.Label=e.label,this.Order=e.order,this.PageActionBindingType=e.pageActionBindingType,this.PageActionType=e.pageActionType,this.PageObjectBindingId=e.pageObjectBindingId,this.Attributes={},e.attributes)for(var t=0,n=Object.keys(e.attributes);t<n.length;t++){var o=n[t];this.Attributes[o]=new r.FlowAttribute(o,e.attributes[o])}this.Outcome=e}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this.Id},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isBulkAction",{get:function(){return this.IsBulkAction},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isOut",{get:function(){return this.IsOut},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageActionBindingType",{get:function(){return this.PageActionBindingType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageActionType",{get:function(){return this.PageActionType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pageObjectBindingId",{get:function(){return this.PageObjectBindingId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!1,configurable:!0}),e.prototype.iFlowOutcome=function(){return this.Outcome},e}();t.FlowOutcome=a},180:function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.FlowPage=void 0;var s=function(e){function t(t){return e.call(this,t)||this}return i(t,e),t.prototype.componentDidMount=function(){return r(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.loadAllValues()];case 2:return t.sent(),[2,Promise.resolve()]}}))}))},t}(n(923).FlowBaseComponent);t.FlowPage=s},259:function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var r=n(804);n(310);var a=function(e){function t(t){var n=e.call(this,t)||this;return n.icons={},n.selectedItem=n.props.onChangeValue,n.onchange=n.onchange.bind(n),n.addIcon=n.addIcon.bind(n),n.addIcons=n.addIcons.bind(n),n.addIcons(),n}return i(t,e),t.prototype.onchange=function(e){this.selectedItem=e.target.innerText,this.props.onChange&&this.props.onChange(this.selectedItem),this.forceUpdate()},t.prototype.addIcons=function(){this.addIcon("asterisk","Asterisk"),this.addIcon("plus","Plus"),this.addIcon("minus","Minus"),this.addIcon("eur","Eur"),this.addIcon("euro","Euro"),this.addIcon("cloud","Cloud"),this.addIcon("envelope","Envelope"),this.addIcon("pencil","Pencil"),this.addIcon("glass","Glass"),this.addIcon("music","Music"),this.addIcon("search","Search"),this.addIcon("heart","Heart"),this.addIcon("star","Star"),this.addIcon("star-empty","Star Empty"),this.addIcon("user","User"),this.addIcon("film","Film"),this.addIcon("th-large","Th Large"),this.addIcon("th","Th"),this.addIcon("th-list","Th List"),this.addIcon("ok","Ok"),this.addIcon("remove","Remove"),this.addIcon("zoom-in","Zoom In"),this.addIcon("zoom-out","Zoom Out"),this.addIcon("off","Off"),this.addIcon("signal","Signal"),this.addIcon("cog","Cog"),this.addIcon("trash","Trash"),this.addIcon("home","Home"),this.addIcon("file","File"),this.addIcon("time","Time"),this.addIcon("road","Road"),this.addIcon("download-alt","Download Alt"),this.addIcon("download","Download"),this.addIcon("upload","Upload"),this.addIcon("inbox","Inbox"),this.addIcon("play-circle","Play Circle"),this.addIcon("repeat","Repeat"),this.addIcon("refresh","Refresh"),this.addIcon("list-alt","List Alt"),this.addIcon("lock","Lock"),this.addIcon("flag","Flag"),this.addIcon("headphones","Headphones"),this.addIcon("volume-off","Volume Off"),this.addIcon("volume-down","Volume Down"),this.addIcon("volume-up","Volume Up"),this.addIcon("qrcode","Qrcode"),this.addIcon("barcode","Barcode"),this.addIcon("tag","Tag"),this.addIcon("tags","Tags"),this.addIcon("book","Book"),this.addIcon("bookmark","Bookmark"),this.addIcon("print","Print"),this.addIcon("camera","Camera"),this.addIcon("font","Font"),this.addIcon("bold","Bold"),this.addIcon("italic","Italic"),this.addIcon("text-height","Text Height"),this.addIcon("text-width","Text Width"),this.addIcon("align-left","Align Left"),this.addIcon("align-center","Align Center"),this.addIcon("align-right","Align Right"),this.addIcon("align-justify","Align Justify"),this.addIcon("list","List"),this.addIcon("indent-left","Indent Left"),this.addIcon("indent-right","Indent Right"),this.addIcon("facetime-video","Facetime Video"),this.addIcon("picture","Picture"),this.addIcon("map-marker","Map Marker"),this.addIcon("adjust","Adjust"),this.addIcon("tint","Tint"),this.addIcon("edit","Edit"),this.addIcon("share","Share"),this.addIcon("check","Check"),this.addIcon("move","Move"),this.addIcon("step-backward","Step Backward"),this.addIcon("fast-backward","Fast Backward"),this.addIcon("backward","Backward"),this.addIcon("play","Play"),this.addIcon("pause","Pause"),this.addIcon("stop","Stop"),this.addIcon("forward","Forward"),this.addIcon("fast-forward","Fast Forward"),this.addIcon("step-forward","Step Forward"),this.addIcon("eject","Eject"),this.addIcon("chevron-left","Chevron Left"),this.addIcon("chevron-right","Chevron Right"),this.addIcon("plus-sign","Plus Sign"),this.addIcon("minus-sign","Minus Sign"),this.addIcon("remove-sign","Remove Sign"),this.addIcon("ok-sign","Ok Sign"),this.addIcon("question-sign","Question Sign"),this.addIcon("info-sign","Info Sign"),this.addIcon("screenshot","Screenshot"),this.addIcon("remove-circle","Remove Circle"),this.addIcon("ok-circle","Ok Circle"),this.addIcon("ban-circle","Ban Circle"),this.addIcon("arrow-left","Arrow Left"),this.addIcon("arrow-right","Arrow Right"),this.addIcon("arrow-up","Arrow Up"),this.addIcon("arrow-down","Arrow Down"),this.addIcon("share-alt","Share Alt"),this.addIcon("resize-full","Resize Full"),this.addIcon("resize-small","Resize Small"),this.addIcon("exclamation-sign","Exclamation Sign"),this.addIcon("gift","Gift"),this.addIcon("leaf","Leaf"),this.addIcon("fire","Fire"),this.addIcon("eye-open","Eye Open"),this.addIcon("eye-close","Eye Close"),this.addIcon("warning-sign","Warning Sign"),this.addIcon("plane","Plane"),this.addIcon("calendar","Calendar"),this.addIcon("random","Random"),this.addIcon("comment","Comment"),this.addIcon("magnet","Magnet"),this.addIcon("chevron-up","Chevron Up"),this.addIcon("chevron-down","Chevron Down"),this.addIcon("retweet","Retweet"),this.addIcon("shopping-cart","Shopping Cart"),this.addIcon("folder-close","Folder Close"),this.addIcon("folder-open","Folder Open"),this.addIcon("resize-vertical","Resize Vertical"),this.addIcon("resize-horizontal","Resize Horizontal"),this.addIcon("hdd","Hdd"),this.addIcon("bullhorn","Bullhorn"),this.addIcon("bell","Bell"),this.addIcon("certificate","Certificate"),this.addIcon("thumbs-up","Thumbs Up"),this.addIcon("thumbs-down","Thumbs Down"),this.addIcon("hand-right","Hand Right"),this.addIcon("hand-left","Hand Left"),this.addIcon("hand-up","Hand Up"),this.addIcon("hand-down","Hand Down"),this.addIcon("circle-arrow-right","Circle Arrow Right"),this.addIcon("circle-arrow-left","Circle Arrow Left"),this.addIcon("circle-arrow-up","Circle Arrow Up"),this.addIcon("circle-arrow-down","Circle Arrow Down"),this.addIcon("globe","Globe"),this.addIcon("wrench","Wrench"),this.addIcon("tasks","Tasks"),this.addIcon("filter","Filter"),this.addIcon("briefcase","Briefcase"),this.addIcon("fullscreen","Fullscreen"),this.addIcon("dashboard","Dashboard"),this.addIcon("paperclip","Paperclip"),this.addIcon("heart-empty","Heart Empty"),this.addIcon("link","Link"),this.addIcon("phone","Phone"),this.addIcon("pushpin","Pushpin"),this.addIcon("usd","Usd"),this.addIcon("gbp","Gbp"),this.addIcon("sort","Sort"),this.addIcon("sort-by-alphabet","Sort By Alphabet"),this.addIcon("sort-by-alphabet-alt","Sort By Alphabet Alt"),this.addIcon("sort-by-order","Sort By Order"),this.addIcon("sort-by-order-alt","Sort By Order Alt"),this.addIcon("sort-by-attributes","Sort By Attributes"),this.addIcon("sort-by-attributes-alt","Sort By Attributes Alt"),this.addIcon("unchecked","Unchecked"),this.addIcon("expand","Expand"),this.addIcon("collapse-down","Collapse Down"),this.addIcon("collapse-up","Collapse Up"),this.addIcon("log-in","Log In"),this.addIcon("flash","Flash"),this.addIcon("log-out","Log Out"),this.addIcon("new-window","New Window"),this.addIcon("record","Record"),this.addIcon("save","Save"),this.addIcon("open","Open"),this.addIcon("saved","Saved"),this.addIcon("import","Import"),this.addIcon("export","Export"),this.addIcon("send","Send"),this.addIcon("floppy-disk","Floppy Disk"),this.addIcon("floppy-saved","Floppy Saved"),this.addIcon("floppy-remove","Floppy Remove"),this.addIcon("floppy-save","Floppy Save"),this.addIcon("floppy-open","Floppy Open"),this.addIcon("credit-card","Credit Card"),this.addIcon("transfer","Transfer"),this.addIcon("cutlery","Cutlery"),this.addIcon("header","Header"),this.addIcon("compressed","Compressed"),this.addIcon("earphone","Earphone"),this.addIcon("phone-alt","Phone Alt"),this.addIcon("tower","Tower"),this.addIcon("stats","Stats"),this.addIcon("sd-video","Sd Video"),this.addIcon("hd-video","Hd Video"),this.addIcon("subtitles","Subtitles"),this.addIcon("sound-stereo","Sound Stereo"),this.addIcon("sound-dolby","Sound Dolby"),this.addIcon("sound-5-1","Sound 5 1"),this.addIcon("sound-6-1","Sound 6 1"),this.addIcon("sound-7-1","Sound 7 1"),this.addIcon("copyright-mark","Copyright Mark"),this.addIcon("registration-mark","Registration Mark"),this.addIcon("cloud-download","Cloud Download"),this.addIcon("cloud-upload","Cloud Upload"),this.addIcon("tree-conifer","Tree Conifer"),this.addIcon("tree-deciduous","Tree Deciduous"),this.addIcon("cd","Cd"),this.addIcon("save-file","Save File"),this.addIcon("open-file","Open File"),this.addIcon("level-up","Level Up"),this.addIcon("copy","Copy"),this.addIcon("paste","Paste"),this.addIcon("alert","Alert"),this.addIcon("equalizer","Equalizer"),this.addIcon("king","King"),this.addIcon("queen","Queen"),this.addIcon("pawn","Pawn"),this.addIcon("bishop","Bishop"),this.addIcon("knight","Knight"),this.addIcon("baby-formula","Baby Formula"),this.addIcon("tent","Tent"),this.addIcon("blackboard","Blackboard"),this.addIcon("bed","Bed"),this.addIcon("apple","Apple"),this.addIcon("erase","Erase"),this.addIcon("hourglass","Hourglass"),this.addIcon("lamp","Lamp"),this.addIcon("duplicate","Duplicate"),this.addIcon("piggy-bank","Piggy Bank"),this.addIcon("scissors","Scissors"),this.addIcon("bitcoin","Bitcoin"),this.addIcon("yen","Yen"),this.addIcon("ruble","Ruble"),this.addIcon("scale","Scale"),this.addIcon("ice-lolly","Ice Lolly"),this.addIcon("ice-lolly-tasted","Ice Lolly Tasted"),this.addIcon("education","Education"),this.addIcon("option-horizontal","Option Horizontal"),this.addIcon("option-vertical","Option Vertical"),this.addIcon("menu-hamburger","Menu Hamburger"),this.addIcon("modal-window","Modal Window"),this.addIcon("oil","Oil"),this.addIcon("grain","Grain"),this.addIcon("sunglasses","Sunglasses"),this.addIcon("text-size","Text Size"),this.addIcon("text-color","Text Color"),this.addIcon("text-background","Text Background"),this.addIcon("object-align-top","Object Align Top"),this.addIcon("object-align-bottom","Object Align Bottom"),this.addIcon("object-align-horizontal","Object Align Horizontal"),this.addIcon("object-align-left","Object Align Left"),this.addIcon("object-align-vertical","Object Align Vertical"),this.addIcon("object-align-right","Object Align Right"),this.addIcon("triangle-right","Triangle Right"),this.addIcon("triangle-left","Triangle Left"),this.addIcon("triangle-bottom","Triangle Bottom"),this.addIcon("triangle-top","Triangle Top"),this.addIcon("console","Console"),this.addIcon("superscript","Superscript"),this.addIcon("subscript","Subscript"),this.addIcon("menu-left","Menu Left"),this.addIcon("menu-right","Menu Right"),this.addIcon("menu-down","Menu Down"),this.addIcon("menu-up","Menu Up")},t.prototype.addIcon=function(e,t){this.icons[e]={name:e,label:t}},t.prototype.render=function(){for(var e=this,t=[],n=0,o=Object.keys(this.icons);n<o.length;n++){var i=o[n],a="glyphicon glyphicon-"+this.icons[i].name+" icon-picker-icon";t.push(r.createElement("li",{onClick:function(t){e.onchange(t)}},r.createElement("span",{className:a}),this.icons[i].name))}return r.createElement("div",{className:"btn-group"},r.createElement("button",{type:"button",className:"btn btn-default dropdown-toggle","data-toggle":"dropdown"},r.createElement("span",{className:"glyphicon glyphicon-"+this.selectedItem}),r.createElement("span",{className:"caret"})),r.createElement("ul",{className:"dropdown-menu",role:"menu"},t))},t}(r.Component);t.default=a},864:function(e,t,n){var o="Expected a function",i=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,s=/^0o[0-7]+$/i,l=parseInt,c="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,u="object"==typeof self&&self&&self.Object===Object&&self,d=c||u||Function("return this")(),p=Object.prototype.toString,h=Math.max,f=Math.min,y=function(){return d.Date.now()};function m(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function g(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==p.call(e)}(e))return NaN;if(m(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=m(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(i,"");var n=a.test(e);return n||s.test(e)?l(e.slice(2),n?2:8):r.test(e)?NaN:+e}e.exports=function(e,t,n){var i=!0,r=!0;if("function"!=typeof e)throw new TypeError(o);return m(n)&&(i="leading"in n?!!n.leading:i,r="trailing"in n?!!n.trailing:r),function(e,t,n){var i,r,a,s,l,c,u=0,d=!1,p=!1,b=!0;if("function"!=typeof e)throw new TypeError(o);function v(t){var n=i,o=r;return i=r=void 0,u=t,s=e.apply(o,n)}function w(e){return u=e,l=setTimeout(C,t),d?v(e):s}function I(e){var n=e-c;return void 0===c||n>=t||n<0||p&&e-u>=a}function C(){var e=y();if(I(e))return O(e);l=setTimeout(C,function(e){var n=t-(e-c);return p?f(n,a-(e-u)):n}(e))}function O(e){return l=void 0,b&&i?v(e):(i=r=void 0,s)}function T(){var e=y(),n=I(e);if(i=arguments,r=this,c=e,n){if(void 0===l)return w(c);if(p)return l=setTimeout(C,t),v(c)}return void 0===l&&(l=setTimeout(C,t)),s}return t=g(t)||0,m(n)&&(d=!!n.leading,a=(p="maxWait"in n)?h(g(n.maxWait)||0,t):a,b="trailing"in n?!!n.trailing:b),T.cancel=function(){void 0!==l&&clearTimeout(l),u=0,i=c=r=l=void 0},T.flush=function(){return void 0===l?s:O(y())},T}(e,t,{leading:i,maxWait:t,trailing:r})}},804:function(e){"use strict";e.exports=React}},t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,n),i.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n(806)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,