!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t){e.exports=React},function(e,t,n){},function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(3)),o(n(4))},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0);n(1);var a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.render=function(){if(this.props.state.loading)return i.createElement("div",{className:"file-box"});var e="data:binary/octet-stream;base64,"+this.props.getContentValue(),t=this.props.getAttribute("Title")||"Download File",n="glyphicon glyphicon-"+(this.props.getAttribute("icon")||"envelope")+" icon-button",o={fontSize:(this.props.getAttribute("pointSize")||48)+"pt"};return i.createElement("div",{className:"file-box"},i.createElement("div",{className:"file-box-body"},i.createElement("a",{download:"firmware",href:e},i.createElement("span",{className:n,style:o,title:t}))))},t}(i.Component);manywho.component.register("FileDownloader",a),t.default=a},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0);n(1);var a=n(5),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.componentDidMount=function(){this.forceUpdate(),manywho.state.setComponent(this.props.id,{objectData:this.props.getObjectData(this.props.model)},this.props.flowKey,!0)},t.prototype.render=function(){if(this.props.state.loading)return i.createElement("div",{className:"file-box"});manywho.model.getComponent(this.props.id,this.props.flowKey);var e=this.props.getObjectData(this.props.model)[0],t=e["File Name"],n=(e.Extension,e.Size,e.MimeType,"data:binary/octet-stream;base64,"+e.Content),o=this.props.getAttribute("title")||"Download File",r="glyphicon glyphicon-"+(this.props.getAttribute("icon")||"envelope")+" icon-button",a={fontSize:(this.props.getAttribute("pointSize")||48)+"pt"};return i.createElement("div",{className:"file-box"},i.createElement("div",{className:"file-box-body"},i.createElement("a",{download:t,href:n},i.createElement("span",{className:r,style:a,title:o}))))},t}(i.Component);manywho.component.register("file-download-complex",a.component(c)),t.default=c},function(e,t,n){"use strict";var o=this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},i=this;Object.defineProperty(t,"__esModule",{value:!0});var a,c,u=n(0),p=n(6),l=n(7),s=function(e,t,n){var o=manywho.model.getItem(e,n),r=manywho.model.getOutcomes(e,n);return{className:manywho.styling.getClasses(t,e,o.componentType||o.containerType,n),flowKey:n,id:e,model:o,outcomes:r&&r.map(function(e){return u.createElement(manywho.component.getByName("outcome"),{id:e.id,flowKey:n})}),parentId:t}};t.container=function(e){return function(t){var n=t.id,i=t.parentId,c=t.flowKey,p=manywho.model.getContainer(n,c),f=manywho.model.getChildren(n,c),d=r({},s(n,i,c),{children:manywho.component.getChildComponents(f,n,c)});return manywho.log.debug(l(a||(a=o(["\n            Rendering Container\n            Name: ","\n            Type: ","\n            Order: ","\n        "],["\n            Rendering Container\n            Name: ","\n            Type: ","\n            Order: ","\n        "])),p.developerName,p.containerType,p.order)),u.createElement(e,d)}},t.component=function(e){return function(t){var n=t.id,a=t.parentId,f=t.flowKey,d=manywho.model.getComponent(n,f),m=r({},s(n,a,f),{getAttribute:function(e){if(d&&d.attributes){var t=Object.keys(d.attributes).filter(function(t){return manywho.utils.isEqual(t,e,!0)})[0];if(t)return d.attributes[t]}return null},getContentValue:function(){var e=manywho.state.getComponent(n,f);return e&&void 0!==e.contentValue?e.contentValue:d.contentValue},getObjectData:function(e){return e.objectData?e.objectData.map(function(e){return p.addProperties(e)}):null},onChange:function(e,t,o){if(void 0===t&&(t=!0),void 0===o&&(o=!0),manywho.state.setComponent(n,{contentValue:e},f,o),t){var r=manywho.state.getComponent(n,f);manywho.state.setComponent(n,manywho.validation.validate(d,r,f),f,o)}},onEvent:function(e){manywho.component.handleEvent(i,d,f,e)},state:manywho.state.getComponent(n,f)});return manywho.log.debug(l(c||(c=o(["\n            Rendering Component\n            Name: ","\n            Type: ","\n            Order: ","\n        "],["\n            Rendering Component\n            Name: ","\n            Type: ","\n            Order: ","\n        "])),d.developerName,d.componentType,d.order)),u.createElement(e,m)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=["developerName","externalId","internalId","properties","isSelected","order"];t.removeProperties=function(e){return e.map(function(e){return Object.keys(e).filter(function(e){return-1===o.indexOf(e)}).forEach(function(t){return delete e[t]}),e.properties&&(e.properties=e.properties.map(function(e){return e.objectData&&(e.objectData=t.removeProperties(e.objectData)),e})),e})},t.addProperties=function(e){return e.properties.forEach(function(n){e.hasOwnProperty(n.developerName)||Object.defineProperty(e,n.developerName,{configurable:!0,enumerable:!0,get:function(){return n.objectData?n.objectData.map(function(e){return t.addProperties(e)}):n.contentValue},set:function(e){Array.isArray(e)?n.objectData=t.removeProperties(e):null==e?(n.objectData=e,n.contentValue=e):n.contentValue=e}})}),e}},function(e,t,n){"use strict";e.exports=function(e){var t=void 0;t="string"==typeof e?[e]:e.raw;for(var n="",o=0;o<t.length;o++)n+=t[o].replace(/\\\n[ \t]*/g,"").replace(/\\`/g,"`"),o<(arguments.length<=1?0:arguments.length-1)&&(n+=arguments.length<=o+1?void 0:arguments[o+1]);var r=n.split("\n"),i=null;return r.forEach(function(e){var t=e.match(/^(\s+)\S+/);if(t){var n=t[1].length;i=i?Math.min(i,n):n}}),null!==i&&(n=r.map(function(e){return" "===e[0]?e.slice(i):e}).join("\n")),(n=n.trim()).replace(/\\n/g,"\n")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,