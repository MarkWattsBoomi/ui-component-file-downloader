!function(t){function e(n){if(o[n])return o[n].exports;var r=o[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var o={};e.m=t,e.c=o,e.d=function(t,o,n){e.o(t,o)||Object.defineProperty(t,o,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var o=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(o,"a",o),o},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=2)}([function(t,e){t.exports=React},function(t,e){},function(t,e,o){"use strict";function n(t){for(var o in t)e.hasOwnProperty(o)||(e[o]=t[o])}Object.defineProperty(e,"__esModule",{value:!0}),n(o(3)),n(o(4))},function(t,e,o){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var r=o(0);o(1);var i=function(t){function e(e){var o=t.call(this,e)||this;o.componentId="",o.flowKey="",o.attributes={},o.selectedItem=null,o.text="",o.componentId=e.id,o.flowKey=e.flowKey;var n=manywho.model.getComponent(o.props.id,o.props.flowKey);if(n.attributes)for(var r in n.attributes)o.attributes[r]=n.attributes[r];return o}return n(e,t),e.prototype.componentDidMount=function(){this.forceUpdate()},e.prototype.componentDidUpdate=function(){},e.prototype.getAttribute=function(t){return this.attributes[t]?this.attributes[t]:null},e.prototype.render=function(){var t=(manywho.model.getComponent(this.componentId,this.flowKey),manywho.state.getComponent(this.componentId,this.flowKey)),e=t.contentValue,o="data:binary/octet-stream;base64,"+e,n=(this.getAttribute("Title"),this.getAttribute("Icon")||"envelope"),n=this.getAttribute("PointSize")||"48";return n+="pt",r.createElement("div",{className:"file-box"},r.createElement("div",{className:"file-box-body"},r.createElement("a",{download:"firmware",href:o},r.createElement("span",{className:"glyphicon glyphicon-envelope icon-button",title:"Download File"}))))},e}(r.Component);manywho.component.register("FileDownloader",i),e.default=i},function(t,e,o){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var r=o(0);o(1);var i=function(t){function e(e){var o=t.call(this,e)||this;o.componentId="",o.flowKey="",o.attributes={},o.selectedItem=null,o.text="",o.componentId=e.id,o.flowKey=e.flowKey;var n=manywho.model.getComponent(o.props.id,o.props.flowKey);if(n.attributes)for(var r in n.attributes)o.attributes[r]=n.attributes[r];return o}return n(e,t),e.prototype.componentDidMount=function(){var t,e=manywho.model.getComponent(this.componentId,this.flowKey),o=manywho.state.getComponent(this.componentId,this.flowKey)||{};if(o.objectData[0]){t=o.objectData[0];t.properties}else t=e.objectData[0];t=JSON.parse(JSON.stringify(t));var n={objectData:[t]};manywho.state.setComponent(this.componentId,n,this.flowKey,!0),this.forceUpdate()},e.prototype.componentDidUpdate=function(){},e.prototype.getAttribute=function(t){return this.attributes[t]?this.attributes[t]:null},e.prototype.render=function(){var t=manywho.model.getComponent(this.componentId,this.flowKey);manywho.state.getComponent(this.componentId,this.flowKey);if(t.objectData&&t.objectData[0])var e=t.objectData[0],o=manywho.utils.getObjectDataProperty(e.properties,"Content").contentValue,n=manywho.utils.getObjectDataProperty(e.properties,"File Name").contentValue,i=(manywho.utils.getObjectDataProperty(e.properties,"Extension").contentValue,manywho.utils.getObjectDataProperty(e.properties,"Size").contentValue,manywho.utils.getObjectDataProperty(e.properties,"MimeType").contentValue,"data:binary/octet-stream;base64,"+o);var a=(this.getAttribute("Title"),this.getAttribute("Icon")||"envelope"),a=this.getAttribute("PointSize")||"48";return a+="pt",r.createElement("div",{className:"file-box"},r.createElement("div",{className:"file-box-body"},r.createElement("a",{download:n,href:i},r.createElement("span",{className:"glyphicon glyphicon-envelope icon-button",title:"Download File"}))))},e}(r.Component);manywho.component.register("FileDownloaderComplex",i),e.default=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,